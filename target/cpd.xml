<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
   <duplication lines="35" tokens="108">
      <file column="9" endcolumn="30" endline="104" line="70"
            path="/home/io/USI/BAC_1/02_PROGRAMMING-FUNDAMENTALS/Lab/project-cellarium/parser/ArithParser.java"/>
      <file column="9" endcolumn="32" endline="146" line="110"
            path="/home/io/USI/BAC_1/02_PROGRAMMING-FUNDAMENTALS/Lab/project-cellarium/parser/ArithParser.java"/>
      <codefragment><![CDATA[        }
        
        // next token fetched in parseTerm()
        
        while (lexer.getCurrentToken().getType() == TokenType.PLUS
               || lexer.getCurrentToken().getType() == TokenType.MINUS) {
            final boolean shouldAdd = lexer.getCurrentToken().getType() == TokenType.PLUS;
            lexer.fetchNextToken();
            final Node currentTerm = parseTerm();
            //next token already fetched in parseTerm()
            if (currentTerm == null) {
                // currentTerm is malformed and parseTerm() has already printed an error message
                return null;
            }
            if (shouldAdd) {
                term = new Addition(term, currentTerm);
            } else {
                term = new Subtraction(term, currentTerm);
            }
        }
        return term;
    }
    
    /**
     * Parse a term.
     * This assumes the lexer already points to the first token of this term.
     * 
     * <p>EBNF:
     * <code>
     * TERM ::= FACTOR { ( "*" | "/" ) FACTOR }
     * </code>
     * 
     * @return a Node representing the term
     */
    private Node parseTerm() {]]></codefragment>
   </duplication>
</pmd-cpd>